//图
//图G由顶点集V和边集E组成，G=（V，E）
//V：顶点的个数，图G的阶
//E：边的条数
//顶点数不能为0，边的数量可以为0
//无向边（边），有向边（弧）
//对于无向图，顶点的度：依附于该顶点的边的条数TD（V），所有的TD和为2E
//对于有向图：入度：以V为终点的有向边的数目ID（V）  出度：以V为起点的有向边的数目OD（V）
//顶点的度：TD（V）= ID（V）+OD（V） ID的和=OD的合=弧的条数

//路径：点到点的路
//回路：第一个和最后一个顶点相同的路
//路径长度：边数
//点到点的距离：最短的路径，如果没有就是无穷
//有n个结点的无向图G，如果是连通图，最少n-1条边
//有向图，若果是强连通图，最少n条边

//子图
//v1是v的子集，e1是e的子集，G（v1，e1）是G的子图
//连通分量：无向图中极大连通子图
//强连通分量：有向图中极大强连通子图

//无向完全图：任意两个点都存在边，n个顶点，（n2-n）/2条边
//有向完全图：任意两点都有相反方向的两条弧 n2-n条边

/////////图的存储
//邻接矩阵法
//0表示不邻接，1表示邻接
#define max 100
typedef struct{
    char vex[max];
    int edge[max][max];
    int vexnum,arcnum;
}MGraph;
//第i个结点的度=第i行非零元素的个数
//i出度=第i行的非0个数，i入度=第i列的非0个数

////邻接表法
//类似于树的孩子表示法，一边存数据，一边存一条边
typedef struct VNode{
    vertexType data;
    ArcNode *first;
}VNode,ADjlist[max]
typedef struct ArcNode{
    int sdjvex;
    struct ArcNode *next;
}ArcNode;11
